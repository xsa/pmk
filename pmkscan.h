/* $Id$ */

/*
 * Copyright (c) 2003-2005 Damien Couderc
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *    - Redistributions of source code must retain the above copyright
 *      notice, this list of conditions and the following disclaimer.
 *    - Redistributions in binary form must reproduce the above
 *      copyright notice, this list of conditions and the following
 *      disclaimer in the documentation and/or other materials provided
 *      with the distribution.
 *    - Neither the name of the copyright holder(s) nor the names of its
 *      contributors may be used to endorse or promote products derived
 *      from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT HOLDERS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 */

#ifndef _PMKSCAN_H_
#define _PMKSCAN_H_

#include <stdio.h>
#include "dynarray.h"
#include "hash.h"
#include "parse_lang.h"

/**********
 constants
************************************************************************/

/* pmkscan specific version */
#define PREMAKE_SUBVER_PMKSCAN	"5"

#ifndef DATADIR
/* for lint */
#define DATADIR	"/DATADIR_not_defined"
#endif

#define PMKSCAN_DATA	DATADIR "/pmkscan.dat"
#define PMKSCAN_PMKFILE	"pmkfile.scan"
#define PMKSCAN_MKFILE	"Makefile.scan"

/* languages, should use lgdata later */
#define PMKSCAN_LANG_C          "C"
#define PMKSCAN_LANG_CXX        "C++"

#define PSC_MAIN_C		"main"

#define PSC_TOK_INCL	1
#define PSC_TOK_FUNC	2

/* source file type */
#define SRC_TYPE_UNKNOWN	0
#define SRC_TYPE_ASM		1
#define SRC_TYPE_C			2
#define SRC_TYPE_CXX		3

/* object type */
#define OBJ_TYPE_UNKNOWN	0
#define OBJ_TYPE_ASM		1
#define OBJ_TYPE_C			2
#define OBJ_TYPE_CXX		3

#define OBJ_SUFFIX		".o"

#define MKF_OUTPUT_WIDTH	72

#define MKF_HEADER_GEN	"# Generated by pmkscan.\n\n"
#define MKF_HEADER_ASM	"AS=\t@AS@\n" \
			"ASFLAGS=\n"
#define MKF_HEADER_C	"CC=\t@CC@\n" \
			"CFLAGS=\t@CFLAGS@\n"
#define MKF_HEADER_CXX	"CXX=\t@CXX@\n" \
			"CXXFLAGS=\t@CXXFLAGS@\n"
#define MKF_HEADER_LD	"LD=\t@LD@\n" \
			"LDFLAGS=\t@LDFLAGS\n"
#define MKF_HEADER_MISC	"RM=\trm\n" \
			"RMFLAGS=\n"

#define MKF_LINE_JUMP	"\n"
#define MKF_TWICE_JUMP	"\n\n"

#define MKF_BLD_ASM	"${AS} ${ASFLAGS} -c %s"
#define MKF_BLD_C	"${CC} ${CFLAGS} -c %s"
#define MKF_BLD_CXX	"${CXX} ${CXXFLAGS} -c %s"

#define MKF_OBJECT_SRCS	"%s_SRCS=\t"
#define MKF_OBJECT_LABL	"%s: ${%s_SRCS}\n"

#define MKF_TARGET_OBJS	"%s_OBJS=\t"
#define MKF_TARGET_LABL	"%s: ${%s_OBJS}\n" \
			"\t${LD} ${LDFLAGS} -o %s ${%s_OBJS}\n" /* XXX specific ??!! */
#define MKF_TARGET_CLN	"%s_clean:\n" \
			"\t${RM} ${RMFLAGS} ${%s_OBJS}\n" \
			"\t${RM} ${RMFLAGS} %s}\n\n"

#define MKF_TARGET_ALL		"all: %s"
#define MKF_TARGET_CLEAN	"clean: %s"
#define MKF_TARGET_INST		"install:\n" \
			"\t# put your install stuff here\n\n" \
			"deinstall:\n" \
			"\t# put your deinstall stuff here\n\n"


/*******************************
 type and structure definitions
************************************************************************/

/* pseudo token type */
typedef unsigned char	ttype_t;

/* file type and extension struct */
typedef unsigned char	ftype_t;
typedef struct {
	char	*ext;
	ftype_t	 type;
} scn_ext_t;

/* node structure */
typedef struct {
	char		*fname,		/* filename */
				*prefix;	/* prefix name */
	bool		 isdep,		/* is a dependency flag ? */
				 mainproc;	/* has main() proc flag ? */
	dynary		*s_deps,	/* system include dependency list */
				*l_deps,	/* local include dependency list */
				*fd_deps,	/* function declaration list */
				*fc_deps,	/* function call list */
				*t_deps;	/* type dependency list */
	ftype_t		 type;		/* file type */
	int			 score;		/* hit score */
} scn_node_t;

/* object structure */
typedef struct {
	bool		 is_trgt;	/* is a target ? */
	char		*name,		/* object name */
				*node;		/* dependency list */
	dynary		*deps;		/* dependency list */
	scn_node_t	*pnode;		/* associated node */
	ttype_t		 type;		/* object type */
} scn_obj_t;

/* target structure */
typedef struct {
	char	*name;	/* object name */
	dynary	*deps;	/* dependency list */
} scn_trgt_t;

/* XXX */
typedef struct {
	bool	 is_asm,	/* whether at least one file is assembly */
			 is_c,		/* whether at least one file is C */
			 is_cxx;	/* whether at least one file is C++ */
	htable	*nodes,
			*objects,
			*targets,
			*checks;
} scn_glob_t;

/* XXX */
typedef struct {
	char		*dir;
	htable		*nodes;
	prs_cmn_t	*pcmn;
	scn_node_t	*pnode;
} scn_misc;

/* XXX */
typedef struct {
	htable	*functions,
			*includes;
} scandata;


/*********************
 functions prototypes
************************************************************************/

/* init functions */
scn_node_t	*scan_node_init(char *);
void		 scan_node_destroy(scn_node_t *);
scn_obj_t	*scan_object_init(char *);
void		 scan_object_destroy(scn_obj_t *);
scn_trgt_t	*scan_target_init(char *);
void		 scan_target_destroy(scn_trgt_t *);
scn_glob_t	*scan_glob_init(void);
void		 scan_glob_destroy(scn_glob_t *);

/* pmkfile specific */
bool		 parse_data_file(prsdata *, scandata *);
bool		 idtf_check(char *, htable *, htable *, htable *);
bool		 gen_checks(scn_glob_t *, scandata *);
bool		 scan_build_pmk(char *fname, scn_glob_t *, scandata *);

/* makefile specific */
bool		 find_deps(dynary *, dynary *);
void		 recurse_obj_deps(htable *, dynary *, char *);
bool		 gen_objects(scn_glob_t *);
bool		 gen_targets(scn_glob_t *);
size_t		 fprintf_width(size_t, size_t, FILE *, char *);
void		 scan_build_mkf(char *, scn_glob_t *);

/* common functions */
void		 str_to_upper(char *, size_t, char *);
ftype_t		 check_file_ext(char *);
char		*regex_check(char *, char *);
bool		 process_ppro(void *, char *, prseng_t *);
bool		 process_proc_call(void *, char *, prseng_t *);
bool		 process_proc_decl(void *, char *, prseng_t *);
bool		 process_type(void *, char *, prseng_t *);
bool		 parse_file(prs_cmn_t *, scn_node_t *, char *, ftype_t);
bool		 scan_node_file(prs_cmn_t *, char *, bool);
bool		 scan_dir(prs_cmn_t *, char *, bool);
void		 usage(void);

#endif /* _PMKSCAN_H_ */
